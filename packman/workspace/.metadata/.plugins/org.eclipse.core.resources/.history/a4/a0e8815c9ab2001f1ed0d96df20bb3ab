#include "ghost_movement.h"
#include <stdlib.h>

// Function to move Blinky toward Pac-Man's position
void update_blinky_position(uint32_t g_x, uint32_t g_y, uint32_t* g_dir, uint32_t* g_mv,
                            uint32_t pm_x, uint32_t pm_y, int grid[31][28]) {

    int ghost_row = (g_y - 8) / 15;
    int ghost_col = (g_x - 110) / 15;

    int target_row = (pm_y - 8) / 15;
    int target_col = (pm_x - 110) / 15;

    int delta_row = target_row - ghost_row;
    int delta_col = -(target_col - ghost_col);
    int next_dir = 0;

    // Simplified logic to move Blinky towards Pac-Man
    if (delta_col > 0) {
//        *g_dir = 2; // Move Right
    	next_dir = 2;
    } else if (delta_col < 0) {
//        *g_dir = 0; // Move Left
    	next_dir = 0;
    } else if (delta_row > 0) {
//        *g_dir = 1; // Move Down
    	next_dir = 1;
    } else if (delta_row < 0) {
//        *g_dir = 3; // Move Up
    	next_dir = 3;
    }

//    // Update ghost position
//    *g_mv = 1;

    uint32_t g_boardx = g_x - 110;
    uint32_t g_boardy = g_y - 8;

    uint32_t g_top = g_boardy;
    uint32_t g_top_g = g_top / 15;
    uint32_t g_top_i = g_top % 15;

    uint32_t g_bottom = g_boardy + 26;
    uint32_t g_bottom_g = g_bottom / 15;
    uint32_t g_bottom_i = g_bottom % 15;

    uint32_t g_left = g_boardx;
    uint32_t g_left_g = g_left / 15;
    uint32_t g_left_i = g_left % 15;

    uint32_t g_right = g_boardx + 26;
    uint32_t g_right_g = g_right / 15;
    uint32_t g_right_i = g_right % 15;
    int collision;

    *g_mv = 1;

    switch (*g_dir) {

		case (0):
			collision = !grid[(g_top_g + g_bottom_g) / 2][g_right_g];
			if(collision && g_right_i >= 4) {
				*g_dir = next_dir;
			}
			break;

		case (1):
			collision = !grid[g_bottom_g][(g_left_g + g_right_g) / 2];
			if(collision && g_bottom_i >= 4) {
				*g_dir = next_dir;
			}
			break;

		case (2):
			collision = !grid[(g_top_g + g_bottom_g) / 2][g_left_g];
			if(collision && g_left_i <= 11) {
				*g_dir = next_dir;
			}
			break;

		case (3):
			collision = !grid[g_top_g][(g_left_g + g_right_g) / 2];
			if(collision && g_top_i <= 11) {
				*g_dir = next_dir;
			}
			break;

	};

}
