#include "ghost_movement.h"
#include <stdlib.h>

// Function to move Blinky toward Pac-Man's position
void update_blinky_position(uint32_t g_x, uint32_t g_y, uint32_t* g_dir, uint32_t* g_mv,
                            uint32_t pm_x, uint32_t pm_y, int grid[31][28]) {

    int ghost_row = (g_y - 8) / 15;
    int ghost_col = (g_x - 110) / 15;

    int target_row = (pm_y - 8) / 15;
    int target_col = (pm_x - 110) / 15;

    int delta_row = target_row - ghost_row;
    int delta_col = -(target_col - ghost_col);

    // Variables to calculate ghost bounds
    int ghost_top = g_y;
    int ghost_bottom = g_y + 26;
    int ghost_left = g_x;
    int ghost_right = g_x + 26;

    int ghost_top_g = ghost_top / 15;
    int ghost_bottom_g = ghost_bottom / 15;
    int ghost_left_g = ghost_left / 15;
    int ghost_right_g = ghost_right / 15;

    int ghost_top_i = ghost_top % 15;
    int ghost_bottom_i = ghost_bottom % 15;
    int ghost_left_i = ghost_left % 15;
    int ghost_right_i = ghost_right % 15;

    // Check for collision based on current direction
    int collision = 0;
    switch (*g_dir) {
        case 0: // Moving left
            collision = !grid[(ghost_top_g + ghost_bottom_g) / 2][ghost_left_g - 1];
            if (collision && ghost_left_i <= 11) {
                collision = 1;
            }
            break;
        case 1: // Moving down
            collision = !grid[ghost_bottom_g + 1][(ghost_left_g + ghost_right_g) / 2];
            if (collision && ghost_bottom_i >= 4) {
                collision = 1;
            }
            break;
        case 2: // Moving right
            collision = !grid[(ghost_top_g + ghost_bottom_g) / 2][ghost_right_g + 1];
            if (collision && ghost_right_i >= 4) {
                collision = 1;
            }
            break;
        case 3: // Moving up
            collision = !grid[ghost_top_g - 1][(ghost_left_g + ghost_right_g) / 2];
            if (collision && ghost_top_i <= 11) {
                collision = 1;
            }
            break;
    }

    // If collision detected, determine new direction based on Manhattan distance to Pac-Man
    if (collision) {
        int possible_directions[4] = {0, 1, 2, 3};
        int best_dir = -1;
        int min_distance = 9999;

        for (int i = 0; i < 4; i++) {
            int new_row = ghost_row;
            int new_col = ghost_col;
            switch (possible_directions[i]) {
                case 0: // Move left
                    if (ghost_col - 1 >= 0 && grid[ghost_row][ghost_col - 1] == 1) {
                        new_col--;
                    }
                    break;
                case 1: // Move down
                    if (ghost_row + 1 < 31 && grid[ghost_row + 1][ghost_col] == 1) {
                        new_row++;
                    }
                    break;
                case 2: // Move right
                    if (ghost_col + 1 < 28 && grid[ghost_row][ghost_col + 1] == 1) {
                        new_col++;
                    }
                    break;
                case 3: // Move up
                    if (ghost_row - 1 >= 0 && grid[ghost_row - 1][ghost_col] == 1) {
                        new_row--;
                    }
                    break;
            }
            int distance = abs(target_row - new_row) + abs(target_col - new_col);
            if (distance < min_distance) {
                min_distance = distance;
                best_dir = possible_directions[i];
            }
        }
        if (best_dir != -1) {
            *g_dir = best_dir;
        }
    }

    // Update ghost movement
    *g_mv = 1;
}
