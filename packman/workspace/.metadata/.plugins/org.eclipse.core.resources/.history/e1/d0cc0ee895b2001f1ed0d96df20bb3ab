#include "ghost_movement.h"
#include <stdlib.h>

// Function to move Blinky toward Pac-Man's position
void update_blinky_position(uint32_t g_x, uint32_t g_y, uint32_t* g_dir, uint32_t* g_mv,
                            uint32_t pm_x, uint32_t pm_y, int grid[31][28]) {

    int ghost_row = (g_y - 8) / 15;
    int ghost_col = (g_x - 110) / 15;

    int target_row = (pm_y - 8) / 15;
    int target_col = (pm_x - 110) / 15;

    int delta_row = target_row - ghost_row;
    int delta_col = (target_col - ghost_col);

//    // Simplified logic to move Blinky towards Pac-Man
//    if (delta_col > 0) {
//        *g_dir = 2; // Move Right
//    } else if (delta_col < 0) {
//        *g_dir = 0; // Move Left
//    } else if (delta_row > 0) {
//        *g_dir = 1; // Move Down
//    } else if (delta_row < 0) {
//        *g_dir = 3; // Move Up
//    }
//
//    // Update ghost position
//    *g_mv = 1;


    switch (*g_dir) {
		case (0):
			collision = !grid[(pm_top_g + pm_bottom_g) / 2][pm_right_g];
			if(collision && pm_right_i >= 4) {
				axi_reg->pm_mv = 0;
			}

			if(pm_right_i > 6) {
				consume = 1;
				cons_x = pm_right_g;
				cons_y = (pm_top_g + pm_bottom_g) / 2;
			}

			break;
		case (1):
			collision = !grid[pm_bottom_g][(pm_left_g + pm_right_g) / 2];
			if(collision && pm_bottom_i >= 4) {
				axi_reg->pm_mv = 0;
			}

			if(pm_bottom_i > 6) {
				consume = 1;
				cons_x = (pm_left_g + pm_right_g) / 2;
				cons_y = pm_bottom_g;
			}

			break;
		case (2):
			collision = !grid[(pm_top_g + pm_bottom_g) / 2][pm_left_g];
			if(collision && pm_left_i <= 11) {
				axi_reg->pm_mv = 0;
			}

			if(pm_left_i < 9) {
				consume = 1;
				cons_x = pm_left_g;
				cons_y = (pm_top_g + pm_bottom_g) / 2;
			}

			break;
		case (3):
			collision = !grid[pm_top_g][(pm_left_g + pm_right_g) / 2];
			if(collision && pm_top_i <= 11) {
				axi_reg->pm_mv = 0;
			}

			if(pm_top_i < 9) {
				consume = 1;
				cons_x = (pm_left_g + pm_right_g) / 2;
				cons_y = pm_top_g;
			}

			break;
	};

}
