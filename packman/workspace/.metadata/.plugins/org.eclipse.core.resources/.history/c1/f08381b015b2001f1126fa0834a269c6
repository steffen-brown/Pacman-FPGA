#ifndef MB_CONTROLLER
#define MB_CONTROLLER

#include "xil_types.h" // Include Xilinx type definitions

	struct AXI_REGISTERS {
		u32 pm_x; // READ ONLY X position
		u32 pm_y; // READ ONLY Y position
		u32 pm_dir; // Direction of movement: 0-Left, 1-Down, 2-Right, 3-Up
		u32 pm_mv; // Movement on? 0-no, 1-yes

		u32 pellets[31]; // Pellet on? 31 rows, 28 lsb bitmapped | 0-off, 1-on
		u32 kill_mode; // Ghost killable skin? 0-no, 1-yes

		u32 g0_x;
		u32 g0_y;
		u32 g0_dir;
		u32 g0_mv;

		u32 g1_x;
		u32 g1_y;
		u32 g1_dir;
		u32 g1_mv;

		u32 g2_x;
		u32 g2_y;
		u32 g2_dir;
		u32 g2_mv;

		u32 g3_x;
		u32 g3_y;
		u32 g3_dir;
		u32 g3_mv;

		u32 reset; // Reset board NOT WORKING RN
		u32 ghost_reset; // Reset ghost - bitmapped to 4 lsb: Ex: b0101 = ghosts 2 and 0 in reset state. RESET MUST BE MANUALLY UNASSERTED >= 1 tick after assertion

	};


	// GHOST old declaration in comments
//	static volatile struct AXI_REGISTERS* axi_reg = 0x44A00000;
	extern volatile struct AXI_REGISTERS* axi_reg;

	// GHOST converted to extern and grid declaration shifted to .c
	extern int grid[31][28];
//	int grid[31][28] = {
//	    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
//	    {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0 },
//	    {0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0 },
//	    {0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0 },
//	    {0,1,1,1,0,0,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,0,0,1,1,1,0 },
//	    {0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0 },
//	    {0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0 },
//	    {0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0 },
//	    {0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0 },
//	    {0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0 },
//	    {0,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,1,0 },
//	    {0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0 },
//	    {0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0 },
//	    {0,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,1,0 },
//	    {0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0 },
//	    {0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0 },
//	    {0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0 },
//	    {0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0 },
//	    {0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0 },
//	    {0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0 },
//	    {0,1,1,1,0,0,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,0,0,1,1,1,0 },
//	    {0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0 },
//	    {0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0 },
//	    {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0 },
//	    {0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0 },
//	    {0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0 },
//	    {0,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0 },
//	    {0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0 },
//	    {0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0 },
//	    {0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0 },
//	    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
//	};

#endif
